{"version":3,"sources":["store/store.js","api/api.js","components/User/User.js","shapes/UserShape.js","components/UsersList/UsersList.js","App.js","reportWebVitals.js","index.js"],"names":["store","createStore","state","action","type","users","currentPage","choosedUserId","nextUserId","maxUsers","CORS_URL","API_URL","getUsers","url","fetch","then","response","ok","Error","status","statusText","json","request","User","PropTypes","shape","name","string","isRequired","surname","desc","user","ListItem","className","Card","UsersList","nextPage","prevPage","slicedUsers","slice","List","length","map","id","CircularProgress","Button","onClick","variant","color","style","margin","App","storage","useSelector","dispatch","useDispatch","loadUsers","useCallback","functionType","a","changeChoosedUser","min","max","rand","Math","random","round","randomInteger","useEffect","setInterval","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e149be1.chunk.js","sourcesContent":["import { createStore } from 'redux';\n\nconst initialState = {\n  users: [],\n  maxUsers: 5,\n  currentPage: 1,\n  choosedUserId: 1,\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'LOAD': {\n      return {\n        ...state,\n        users: action.users,\n      }\n    }\n\n    case 'NEXT_PAGE': {\n      return {\n        ...state,\n        currentPage: state.currentPage + 1,\n      }\n    }\n\n    case 'PREV_PAGE': {\n      return {\n        ...state,\n        currentPage: state.currentPage - 1,\n      }\n    }\n\n    case 'CHANGE_CHOOSED_USER': {\n      return {\n        ...state,\n        choosedUserId: action.nextUserId,\n      }\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n\nexport const store = createStore(reducer, initialState);\n","const CORS_URL =`https://cors-anywhere.herokuapp.com/`;\nconst API_URL = `https://jsonkeeper.com/b/Y31M`;\n\nconst request = (url = '') => fetch(CORS_URL + `${API_URL}${url}`)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  });\n\nexport const getUsers = () => request();\n","import { Card, ListItem } from '@material-ui/core';\nimport React from 'react';\nimport './User.scss';\nimport { UserShape } from '../../shapes/UserShape';\n\nexport const User = ({ user }) => {\n  const { name, surname, desc } = user;\n\n  return (\n    <ListItem className=\"list-item\">\n      <Card className=\"list-item__card\">\n        <h3>{`${name} ${surname}`}</h3>\n        <p>{desc}</p>\n      </Card>\n    </ListItem>\n  );\n}\n\nUser.propTypes = {\n  user: UserShape,\n};\n","import PropTypes from 'prop-types';\n\nexport const UserShape = PropTypes.shape({\n  name: PropTypes.string.isRequired,\n  surname: PropTypes.string.isRequired,\n  desc: PropTypes.string.isRequired,\n})\n","import { Button, CircularProgress, List } from '@material-ui/core';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { User } from '../User/User';\nimport './UsersList.scss';\n\nexport const UsersList = ({\n  users,\n  maxUsers,\n  currentPage,\n  nextPage,\n  prevPage,\n  choosedUserId,\n}) => {\n  const slicedUsers = users.slice(\n    currentPage * maxUsers - maxUsers,\n    currentPage * maxUsers\n  );\n\n  return (\n    <>\n      <h1>Users</h1>\n      <p>{users[choosedUserId] ? `${users[choosedUserId].name} ${users[choosedUserId].surname}` : null}</p>\n      <List className=\"list\">\n        {slicedUsers.length ? (\n          slicedUsers.map((user) => <User key={user.id} user={user} />)\n        ) : (\n          <div className=\"progress\">\n            <CircularProgress />\n          </div>\n        )}\n      </List>\n      <div>\n        {slicedUsers.length ? (\n          <>\n            <Button\n              type=\"button\"\n              onClick={prevPage}\n              variant=\"contained\"\n              color={(currentPage > 1) ? 'primary' : 'default'}\n              style={{margin: 10 + 'px'}}\n            >\n              Prev\n            </Button>\n            <span>{currentPage}</span>\n            <Button\n              type=\"button\"\n              onClick={nextPage}\n              variant=\"contained\"\n              color={(currentPage !== users.length / maxUsers) ? 'primary' : 'default'}\n              style={{margin: 10 + 'px'}}\n            >\n              Next\n            </Button>\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n};\n\nUsersList.propTypes = {\n  users: PropTypes.array.isRequired,\n  maxUsers: PropTypes.number.isRequired,\n  currentPage: PropTypes.number.isRequired,\n  nextPage: PropTypes.func.isRequired,\n  prevPage: PropTypes.func.isRequired,\n  choosedUserId: PropTypes.number.isRequired,\n}\n","import React, { useCallback, useEffect } from \"react\";\nimport './App.scss';\nimport { getUsers } from './api/api';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { UsersList } from \"./components/UsersList/UsersList\";\n\nconst App = () => {\n  const storage = useSelector(store => store);\n  const dispatch = useDispatch();\n\n  const loadUsers = useCallback(async(functionType) => {\n    const users = await functionType();\n\n    dispatch({\n      type: 'LOAD',\n      users: users.users,\n    });\n  }, [dispatch])\n\n  const randomInteger = (min, max) => {\n    const rand = min - 0.5 + Math.random() * (max - min + 1);\n  \n    return Math.round(rand);\n  }\n\n  const changeChoosedUser = useCallback(() => {\n    if (storage.users.length === 0) {\n      return\n    }\n\n    const nextUserId = randomInteger(1, storage.users.length);\n\n    dispatch({\n      type: 'CHANGE_CHOOSED_USER',\n      nextUserId,\n    })\n  }, [dispatch, storage.users.length])\n\n  useEffect(() => {\n    loadUsers(getUsers);\n    changeChoosedUser();\n    setInterval(changeChoosedUser, 8000);\n  }, [loadUsers, changeChoosedUser]);\n\n  const nextPage = () => {\n    if(storage.currentPage === storage.users.length / storage.maxUsers) {\n      return\n    }\n\n    dispatch({\n      type: 'NEXT_PAGE',\n    })\n  }\n\n  const prevPage = () => {\n    if(storage.currentPage === 1) {\n      return\n    }\n\n    dispatch({\n      type: 'PREV_PAGE',\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <UsersList\n        users={storage.users}\n        maxUsers={storage.maxUsers}\n        currentPage={storage.currentPage}\n        choosedUserId={storage.choosedUserId}\n        nextPage={nextPage}\n        prevPage={prevPage}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/store';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}